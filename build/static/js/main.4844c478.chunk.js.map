{"version":3,"sources":["components/Square.jsx","components/Board.jsx","components/Color.js","components/ColorPicker.js","App.js","serviceWorker.js","index.js"],"names":["Square","div","initial","scale","whileHover","whileTap","className","this","props","color","onClick","changeColor","bind","x","y","React","Component","Board","board","map","row","key","square","Color","setColor","ColorPicker","selectedColor","App","console","log","newBoard","state","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4844c478.chunk.js","sourcesContent":["import React from 'react';\r\nimport { motion } from \"framer-motion\";\r\n\r\n\r\nclass Square extends React.Component{\r\n\r\n\r\n  render(){\r\n  return (\r\n      <motion.div initial={{scale:0.8}} whileHover={{scale:1}} whileTap={{scale:0.8}} className={this.props.color} onClick={this.props.changeColor.bind(this,this.props.x,this.props.y)} />\r\n  );\r\n  }\r\n}\r\n\r\n\r\n  export default Square","import React from 'react';\r\nimport Square from './Square'\r\n\r\nclass Board extends React.Component {\r\n  \r\n\r\n    render() { \r\n      return <div>\r\n          <table>\r\n            <tbody>\r\n    {this.props.board.map((row,y)=>(<tr key={y}>\r\n    {row.map((square,x,)=>(<td key={x}><Square color={square}x={x}y={y}changeColor={this.props.changeColor}/></td>))}\r\n    </tr>))}\r\n    </tbody>\r\n          </table>\r\n          </div>;\r\n    }\r\n  }\r\n\r\n\r\n\r\nexport default Board;\r\n","\r\nimport React from 'react';\r\nimport { motion } from \"framer-motion\"\r\n\r\n\r\nclass Color extends React.Component{\r\n  render(){\r\n  return (\r\n      <motion.div initial={{scale:0.8}} whileHover={{scale:1}} whileTap={{scale:0.9}} className={'c'+this.props.color} onClick={this.props.setColor.bind(this,this.props.color[1])} />\r\n  );\r\n  }\r\n}\r\n\r\n\r\n  export default Color","import React from 'react';\r\nimport Color from './Color'\r\n\r\n\r\nclass ColorPicker extends React.Component {\r\n    render() { \r\n      return <div>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td><Color color={this.props.selectedColor==='w'?'w':'uw'} setColor={this.props.setColor}/></td>\r\n              <td><Color color={this.props.selectedColor==='y'?'y':'uy'} setColor={this.props.setColor}/></td>\r\n              <td><Color color={this.props.selectedColor==='g'?'g':'ug'} setColor={this.props.setColor}/></td>\r\n              <td><Color color={this.props.selectedColor==='b'?'b':'ub'} setColor={this.props.setColor}/></td>\r\n              <td><Color color={this.props.selectedColor==='r'?'r':'ur'} setColor={this.props.setColor}/></td>\r\n              <td><Color color={this.props.selectedColor==='o'?'o':'uo'} setColor={this.props.setColor}/></td>\r\n              </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>;\r\n  }\r\n}\r\n\r\n\r\nexport default ColorPicker;\r\n","import React from 'react';\nimport './App.css';\nimport './index.css';\nimport Board from './components/Board';\nimport ColorPicker from './components/ColorPicker'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      board:[\n        [null,null,null,'g' ,'g' ,'g' ,null,null,null,null,null,null],\n        [null,null,null,'g' ,'g' ,'g' ,null,null,null,null,null,null],\n        [null,null,null,'g' ,'g' ,'g' ,null,null,null,null,null,null],\n    \n        ['r' ,'r' ,'r' ,'w' ,'w' ,'w' ,'o' ,'o' ,'o' ,'y' ,'y' ,'y' ],\n        ['r' ,'r' ,'r' ,'w' ,'w' ,'w' ,'o' ,'o' ,'o' ,'y' ,'y' ,'y' ],\n        ['r' ,'r' ,'r' ,'w' ,'w' ,'w' ,'o' ,'o' ,'o' ,'y' ,'y' ,'y' ],\n    \n        [null,null,null,'b' ,'b' ,'b' ,null,null,null,null,null,null],\n        [null,null,null,'b' ,'b' ,'b' ,null,null,null,null,null,null],\n        [null,null,null,'b' ,'b' ,'b' ,null,null,null,null,null,null],\n      ],\n      selectedColor:'w',\n    }\n  }\n\n\n  changeColor = (x,y) => {\n    console.log('change color')\n    let newBoard=this.state.board\n    console.log('newboard')\n    newBoard[y][x]=this.state.selectedColor\n    this.setState({board:newBoard})\n    console.log('stateset');\n  }\n\n  setColor =(setColor) =>{\n\n    this.setState({selectedColor:setColor})\n    console.log('set:'+setColor+'selec:'+this.state.selectedColor)\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>RRubix</h1>\n          <Board board={this.state.board}changeColor={this.changeColor}/>\n          <ColorPicker selectedColor={this.state.selectedColor} setColor={this.setColor}/>\n        </header>\n      </div>\n    );\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}